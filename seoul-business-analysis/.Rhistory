library(magrittr)
descr(Cars93 %>% select(Price, RPM, Weight), stats = c("mean", "sd", "min", "med", "max"), round.digits = 1)
detach("package:dplyr", unload = TRUE)
library(dplyr)
descr(Cars93 %>% select(Price, RPM, Weight), stats = c("mean", "sd", "min", "med", "max"), round.digits = 1)
stby(Cars93 %>% select(Price, RPM, Weight), INDICES = Cars93$Origin, FUN = descr,stats = c("mean", "sd", "min", "med", "max"), round.digits = 1)
freq(Cars93 %>% select(Manufacturer))
ctable(x=Cars93$Type, y=Cars93$Cylinders) # 이게 진짜 ㅈㄴ사기인듯
# 데이터에 분포를 적합(fit)시키기
library(propagate)
descr(Cars93 %>% select(Price, RPM, Weight), stats = c("mean", "sd", "min", "med", "max"), round.digits = 1)
# 5장 이상한 다이노 그림 그리기 (솔직히 뭔지 잘 모르겠음) 중요한가?
library(datasauRus)
descr(Cars93 %>% select(Price, RPM, Weight), stats = c("mean", "sd", "min", "med", "max"), round.digits = 1)
# 분할표를 가시화 할 수 있는 plot
library(vcd)
descr(Cars93 %>% select(Price, RPM, Weight), stats = c("mean", "sd", "min", "med", "max"), round.digits = 1)
# ds.total이라는 큰 데이터? 만들기
#reopen with encoding: CP949
library(ggplot2)
library(ggmap)
library(readxl)
files <- c("201512","201606","201612","201706","201712")
columns <- c( "상가업소번호", "상호명", "상권업종대분류명", "상권업종중분류명",
"상권업종소분류명", "시군구명", "행정동명", "경도", "위도")
ds.total <- NULL
#ds$수집연월
#1: 201512
#2: 201606
#3: 201612
#4: 201706
#5: 201712
for (i in 1:length(files)) {
filename <- paste("seoul_",files[i],".xlsx", sep="")
cat("read ", filename, "...\n")         # 읽을 파일 이름 출력
ds <- read_excel(filename)
ds <- data.frame(ds)
ds <- ds[,columns]
ds$수집연월 <- rep(i, nrow(ds))
ds.total <- rbind(ds.total,ds)
}
setwd("C:/Users/82109/Documents/R_prog/서울시 상권 분석")
# ds.total이라는 큰 데이터? 만들기
#reopen with encoding: CP949
library(ggplot2)
library(ggmap)
library(readxl)
files <- c("201512","201606","201612","201706","201712")
columns <- c( "상가업소번호", "상호명", "상권업종대분류명", "상권업종중분류명",
"상권업종소분류명", "시군구명", "행정동명", "경도", "위도")
ds.total <- NULL
#ds$수집연월
#1: 201512
#2: 201606
#3: 201612
#4: 201706
#5: 201712
for (i in 1:length(files)) {
filename <- paste("seoul_",files[i],".xlsx", sep="")
cat("read ", filename, "...\n")         # 읽을 파일 이름 출력
ds <- read_excel(filename)
ds <- data.frame(ds)
ds <- ds[,columns]
ds$수집연월 <- rep(i, nrow(ds))
ds.total <- rbind(ds.total,ds)
}
head(ds.total)
tail(ds.total)
files[1]
paste("seoul_",dkdkdk,".xlsx")
p="ffdffdfdf"
paste("seoul_",p,".xlsx")
paste("seoul_",p,".xlsx", sep = "")
rm(p)
tail(ds.total)
dim(ds.total)
str(ds.total)
unique(ds.total$수집연월)                 # 수집연월
unique(ds.total$상권업종대분류명)         # 상권업종 대분류
unique(ds.total$상권업종중분류명)         # 상권업종 중분류
unique(ds.total$상권업종소분류명)         # 상권업종 소분류
str(ds.total)
#### Q1: 2017년도 서울시 업종별 점포수를 나타내시오: 상권업종대분류명에 따른 분류
# NA 포함여부 확인
sum(is.na(ds.total))
is.na(ds.total)
# 201712 수집 데이터만 추출
ds.201712 <- subset(ds.total, ds.total$수집연월==5)
ds.201712
# 업종별 점포수(대분류)
store.level_1 <- aggregate(ds.201712[,1], by=list(대분류=ds.201712$상권업종대분류명), FUN=length)
store.level_1
# 이렇게 해도 된다...
#library(dplyr)
#store.level_1_1 = ds.201712%>% group_by(상권업종대분류명)%>%
#                  summarise(count=n())
#store.level_1_1
ggplot(store.level_1, aes(x=reorder(대분류, -count), y=count)) +
geom_bar(stat="identity", width=0.7, fill="steelblue") +
ggtitle("업종별 점포수") +
theme(plot.title = element_text(color="black", size=14, face="bold"),
axis.text.x = element_text(size=7, angle = 45))
names(store.level_1)[2] = c("count")
store.level_1
ggplot(store.level_1, aes(x=reorder(대분류, -count), y=count)) +
geom_bar(stat="identity", width=0.7, fill="steelblue") +
ggtitle("업종별 점포수") +
theme(plot.title = element_text(color="black", size=14, face="bold"),
axis.text.x = element_text(size=7, angle = 45))
store.region <- aggregate(ds.201712[,1],by=list(구이름=ds.201712$시군구명), FUN=length)
store.region
names(store.region)[2] = c("count")
ggplot(store.region, aes(x=구이름, y=count)) +
geom_bar(stat="identity", width=0.7, fill="steelblue") +
ggtitle("구별 점포수") +
theme(plot.title = element_text(color="black", size=14, face="bold"),
axis.text.x = element_text(size = 6, angle = 45))
# reording
ggplot(store.region, aes(reorder(구이름,-count), y=count)) +
geom_bar(stat="identity", width=0.7, fill="steelblue") +
ggtitle("구별 점포수") +
theme(plot.title = element_text(color="black", size=14, face="bold"),
axis.text.x = element_text(size = 6, angle = 45))
(max(df3$lon)+min(df3$lon))/2
mean(df3$lon)
store.region
#### Q3: 2017년도 서울시 업종별 점포수를 구별로 나타내시오(지도)
#구별 점포수를 지도로 나타내기
store.region.loc <- aggregate(ds.201712[,c("경도","위도")],
by=list(구이름=ds.201712$시군구명),
FUN=mean)
store.region.loc
abc <- ds.201712 %>% group_by(시군구명) %>% summarise(경도, 위도)
abc <- ds.201712 %>% group_by(시군구명) %>% summarise(경도)
ds.201712 %>% group_by(시군구명) %>% summarise(경도=경도)
ds.201712 %>% group_by(시군구명) %>% summarise(경도=ds.201712$경도)
ds.201712 %>% group_by(시군구명) %>% summarise("경도"=ds.201712$경도)
ds.201712 %>% group_by(시군구명)
ds.201712 %>% select(시군구명, 경도, 위도)
ds.201712 %>% group_by(시군구명) %>% summarise(경도=mean(경도))
ds.201712 %>% group_by(시군구명) %>% summarise(경ㅋㅋㅋ도=mean(경도))
ds.201712 %>% group_by(시군구명) %>% summarise(경도=mean(경도), 위도=mean(위도))
store.region.loc
ds.201712 %>% group_by(시군구명) %>% summarise(경도=round(mean(경도),5), 위도=round(mean(위도),5))
ds.201712 %>% group_by(시군구명) %>% summarise(경도=mean(round(경도),5), 위도=mean(round(위도),5))
store.region.loc
store.region
#지도 위에 구별 점포수 표시
store.region <- data.frame(store.region,store.region.loc[,2:3])
store.region
register_google(key="AIzaSyBexrhiyy5u-Fd4dTzXFyzKiCiuod9raWs")
cen <- c(mean(store.region$경도), mean(store.region$위도))
map <- get_googlemap(center=cen,                # 마커 없는 지도 가져오기
maptype="roadmap",
size=c(640,640),
zoom=11)
ggmap(map)
gmap <- ggmap(map)                              # 지도를 저장
gmap <- ggmap(map)                              # 지도를 저장
gmap+geom_point(data = store.region, aes(x=경도, y=위도,size=count),
alpha=0.5, col="red")
gmap+geom_point(data = store.region, aes(x=경도, y=위도,size=count),
alpha=0.5, col="red") +
scale_size_continuous(range = c(1, 17))
gmap+geom_point(data = store.region, aes(x=경도, y=위도,size=count),
alpha=0.5, col="red") +
scale_size_continuous(range = c(1, 17))+      # 원의 크기 조절
geom_text(data=store.region,                  # 지도위에 텍스트 표시
aes(x=경도,y=위도),                 # 텍스트 위치 (= 구의 좌표)
size=3,                             # 텍스트 크기
label=store.region$구이름)
#### Q4: 점포수가 많은 상위 10개동을 알아내고 막대그래프로 나타내시오
# 점포수가 많은 상위 10개 동 확인
store.dong <- aggregate(ds.201712[,1], by=list(동이름=ds.201712$행정동명), FUN=length)
store.dong
ds.201712 %>% group_by(행정동명) %>% summarise(count=n())
names(store.dong)[2] = c("count")
head(store.dong)
store.dong <- store.dong[order(store.dong$count, decreasing = T),]
dong.top10 <- store.dong[1:10,]
dong.top10
store.dong %>% arrange(desc(count)) %>% head(10)
ggplot(dong.top10, aes(x=reorder(동이름, -count), y=count)) +
geom_bar(stat="identity", width=0.7, fill="steelblue") +
ggtitle("점포수 많은 상위 10개동") +
theme(plot.title = element_text(color="black", size=14, face="bold"),
axis.text.x = element_text(angle = 45))
ggplot(dong.top10, aes(x=reorder(동이름, -count), y=count)) +
geom_col(stat="identity", width=0.7, fill="steelblue") +
ggtitle("점포수 많은 상위 10개동") +
theme(plot.title = element_text(color="black", size=14, face="bold"),
axis.text.x = element_text(angle = 45))
ggplot(dong.top10, aes(x=reorder(동이름, -count), y=count)) +
geom_col(width=0.7, fill="steelblue") +
ggtitle("점포수 많은 상위 10개동") +
theme(plot.title = element_text(color="black", size=14, face="bold"),
axis.text.x = element_text(angle = 45))
ggplot(dong.top10, aes(x=reorder(동이름, -count), y=count)) +
geom_bar(stat="identity", width=0.7, fill="steelblue") +
ggtitle("점포수 많은 상위 10개동") +
theme(plot.title = element_text(color="black", size=14, face="bold"),
axis.text.x = element_text(angle = 45))
store.dong <- aggregate(ds.201712[,1], by=list(동이름=ds.201712$행정동명), FUN=length)
store.dong
names(store.dong)[2] = c("count")
store.dong <- store.dong[order(store.dong$count, decreasing = F),]
dong.top10 <- store.dong[1:10,]
dong.top10
ggplot(dong.top10, aes(x=reorder(동이름, count), y=count)) +
geom_bar(stat="identity", width=0.7, fill="steelblue") +
ggtitle("점포수 적은 상위 10개동") +
theme(plot.title = element_text(color="black", size=14, face="bold"),
axis.text.x = element_text(angle = 45))
ds.total %>% group_by(수집연월, 상권업종대분류명) %>% summarise(n())
ds.total %>% group_by(수집연월, 상권업종대분류명) %>% summarise(count=n())
store.change <- aggregate(ds.total[,1],
by=list(연월=ds.total$수집연월,
업종대분류=ds.total$상권업종대분류명),
FUN=length)
names(store.change)[3] <- c("count")
head(store.change)
ggplot(store.change, aes(x=연월, y=count,colour=업종대분류,group=업종대분류)) +
geom_line() +
geom_point(size=6, shape=19, alpha=0.5) +
ggtitle("업종별 점포수 변화 (대분류)") +
ylab("점포수") +
scale_x_continuous(breaks=1:5,
labels=files) +
theme(plot.title = element_text(color="black", size=14, face="bold"))
ggplot(store.change, aes(x=연월, y=count,colour=업종대분류,group=업종대분류))
ggplot(store.change, aes(x=연월, y=count,col=업종대분류,group=업종대분류)) +
geom_line() +
geom_point(size=6, shape=19, alpha=0.5) +
ggtitle("업종별 점포수 변화 (대분류)") +
ylab("점포수") +
scale_x_continuous(breaks=1:5,
labels=files) +
theme(plot.title = element_text(color="black", size=14, face="bold"))
ds.total %>% group_by(수집연월, 상권업종대분류명) %>% summarise(count=n())
store.tmp <- aggregate(ds.total[,1], by=list(연월=ds.total$수집연월,
업종소분류=ds.total$상권업종소분류명),
FUN=length)
names(store.tmp)[3] <- c("count")
store.tmp
store.201512 <- store.tmp[store.tmp$연월==1,]
names(store.201512)[3] <- c("cnt_2015")
store.201712 <- store.tmp[store.tmp$연월==5,]
names(store.201712)[3] <- c("cnt_2017")
store.201512
store.diff <- merge(store.201512[,2:3], store.201712[,2:3])
store.diff
store.diff$diff <- abs(store.diff$cnt_2015-store.diff$cnt_2017)
store.diff
store.diff$diff <- abs(store.diff$cnt_2015-store.diff$cnt_2017)
store.diff <- store.diff[order(by=store.diff$diff, decreasing = T),]
store.diff
top10 <- store.diff[1:10,1]
top10 # 가장 많이 변화가 있었던 업종명?
head(store.diff, 10)
#점포수 변화 top10 업종(소분류) 그래프 그리기 - 맨위에 있다고 탑이 아니다 착각하지마
store.change <- subset(store.tmp, store.tmp$업종소분류 %in% top10)
ggplot(store.change, aes(x=연월, y=count, col=업종소분류, group=업종소분류)) +
geom_line() +
geom_point(size=6, shape=19, alpha=0.5) +
ggtitle("점포수 변화 Top 10 업종(소분류)") +
ylab("점포수") +
scale_x_continuous(breaks=1:5,
labels=files) +
theme(plot.title = element_text(color="black", size=14, face="bold"))
store.gu <- aggregate(ds.total[,1],
by=list(연월=ds.total$수집연월,
구이름=ds.total$시군구명),
FUN=length)
store.gu
names(store.gu)[3] <- c("count")
ggplot(store.gu, aes(x=연월, y=count, colour=구이름, group=구이름)) +
geom_line() +
geom_point(size=6, shape=20, alpha=0.5) +
ggtitle("구별 점포수 변화 (대분류)") +
ylab("점포수") +
scale_x_continuous(breaks=1:5,
labels=files) +
theme(plot.title = element_text(color="black", size=14, face="bold"))
#### Q8: 201512,201712 두기간에 점포수 변화가 큰 상위 10개 행정동을 확인하시오
store.tmp <- aggregate(ds.total[,1],
by=list(연월=ds.total$수집연월,
동이름=ds.total$행정동명),
FUN=length)
names(store.tmp)[3] <- c("count")
store.dong.201512 <- store.tmp[store.tmp$연월==1,]
names(store.dong.201512)[3] <- c("cnt_2015")
store.dong.201712 <- store.tmp[store.tmp$연월==5,]
names(store.dong.201712)[3] <- c("cnt_2017")
store.diff <- merge(store.dong.201512[,2:3],store.dong.201712[,2:3]) #중요?
store.diff$diff <- abs(store.diff$cnt_2015-store.diff$cnt_2017)
store.diff <- store.diff[order(by=store.diff$diff, decreasing = T),]
top10 <- store.diff[1:10,1]
top10
store.change <- subset(store.tmp, store.tmp$동이름%in%top10) # 중요?
ggplot(store.change, aes(x=연월, y=count, colour=동이름, group=동이름)) +
geom_line() +
geom_point(size=6, shape=19, alpha=0.5) +
ggtitle("점포수 변화 Top 10 동") +
ylab("점포수") +
scale_x_continuous(breaks=1:5,
labels=files) +
theme(plot.title = element_text(color="black", size=14, face="bold"))
ds.yeoksam <- subset(ds.total, ds.total$수집연월==5&
ds.total$행정동명=="역삼1동")
ds.yeoksam
gmap <- ggmap(map)                              # 지도를 저장
gmap+geom_point(data = ds.yeoksam,
aes(x=경도, y=위도, col=상권업종대분류명),
size=2, alpha=0.7)
gmap+geom_point(data = ds.yeoksam,
aes(x=경도, y=위도, col=상권업종대분류명),
size=2, alpha=0.7) +
labs(x = "Longitude", y = "Latitude",
title="역삼1동 업종별 점포", color = "업종")
ds.yeoksam2 <- subset(ds.yeoksam, ds.yeoksam$상권업종소분류명=="커피전문점/카페/다방")
gmap+geom_point(data = ds.yeoksam2,
aes(x=경도, y=위도),size=2,alpha=0.5, col="red") +
labs(x = "Longitude", y = "Latitude",
title="역삼1동 커피점")
ds.yeoksam <- subset(ds.total, ds.total$수집연월==5&
ds.total$행정동명=="역삼1동")
register_google(key="AIzaSyBexrhiyy5u-Fd4dTzXFyzKiCiuod9raWs")
cen <- c(mean(ds.yeoksam$경도),mean(ds.yeoksam$위도))
map <- get_googlemap(center = cen,          # 마커 없는 지도 가져오기
maptype="roadmap",
size=c(640,640),
zoom=15)
gmap <- ggmap(map)                              # 지도를 저장
gmap+geom_point(data = ds.yeoksam,
aes(x=경도, y=위도, col=상권업종대분류명),
size=2, alpha=0.7) +
labs(x = "Longitude", y = "Latitude",
title="역삼1동 업종별 점포", color = "업종")
i=1
vectorContains <- function(x,y){
while(i<length(x)){
for (x[i] not in 0123456789) {
# GPT가 만든 함수
vectorContains <- function(x, y) {
i <- 1
while(i <= length(x)){
if (!is.numeric(x[i]) || is.na(x[i])) {
stop("This function takes a numeric vector without NAs as input")
}
if (x[i] == y) {
return(TRUE)
}
i <- i + 1
}
return(FALSE)
}
vec <- c(1, 3, 5, 7, 9)
vec2 <- c("a", "b", "c")
vectorContains(vec, 5)   # TRUE
vectorContains(vec, 6)
vectorContains(vec2, "a")   # error message
asdf <- function(x, y) {
for(i in 1:length(x)){
if (!is.numeric(x[i]) || is.na(x[i])) {
stop("This function takes a numeric vector without NAs as input")
}
if (x[i] == y) {
return(TRUE)
}
}
return(FALSE)
}
asdf(vec, 5)
asdf(vec, 6)
asdf(vec2, "a")
# 다이아몬드 데이터
diamonds
is.na(diamonds)
sum(is.na(diamonds))
# 다이아몬드 데이터
diamonds
# 다이아몬드 데이터
str(diamonds)
install.packages("nycflights13")
library(nycflights13)
library(nycflights13)
str(flights)
str(airlines)
# 1.
flights %>% select(year==2013)
# 1.
flights %>% select(year=="2013")
# 1.
flights %>% select(year="2013")
# 1.
flights %>% select(year=2013)
# 1.
flights %>% select(year==2013)
# 1.
flights %>% filter(year==2013)
# 1.
flights %>% filter(year==2013) %>% filter(dep_time==NA)
# 1.
flights %>% filter(year==2013) %>% filter(dep_time=NA)
# 1.
flights %>% filter(year==2013) %>% select(dep_time)
is.na(flights$dep_time)
table(is.na(flights$dep_time))
# 1.
a <- flights %>% filter(year==2013) %>% select(dep_time)
a
table(is.na(a$dep_time))
str(flights)
str(airlines)
# 2.
b <- flights %>% filter(year==2013) %>% group_by(carrier) %>% summarise(dep_time)
# 2.
b <- flights %>% filter(year==2013) %>% group_by(carrier) %>% summarise(n=n())
b
b <- flights %>% filter(year==2013) %>% filter(!is.na(dep_time)) %>% group_by(carrier) %>% summarise(n=n())
b
ggplot(data = b, aes(x=carrier, y= n))+geom_col()
ggplot(data = b, aes(x=reorder(carrier, -n), y= n))+geom_col()
str(flights)
# 3.
unique(flights$year)
str(airlines)
# 3.
merge(flights, airlines)
# 3.
c <- merge(flights, airlines)
str(flights)
c %>% group_by(carrier, name) %>% summarise(mean_dep_delay=mean(dep_time))
c %>% group_by(carrier, name) %>% summarise(mean_dep_delay=mean(dep_time, na.rm=T))
str(flights)
c %>% group_by(carrier, name) %>% summarise(mean_dep_delay=mean(dep_delay, na.rm=T))
c %>% group_by(carrier, name) %>% summarise(mean_dep_delay=mean(dep_delay, na.rm=T)) %>% arrange(dep_delay)
c %>% group_by(carrier, name) %>% summarise(mean_dep_delay=mean(dep_delay, na.rm=T)) %>% arrange(mean_dep_delay)
# 4.
head(c)
# 4.
c %>% group_by(dest) %>% summarise(count=n(), dist=mean(distance) , delay=mean(arr_delay))
# 4.
c %>% group_by(dest) %>% summarise(count=n(), dist=mean(distance, na.rm=T) , delay=mean(arr_delay, na.rm=T))
# 4.
c %>% group_by(dest) %>% summarise(count=n(), dist=mean(distance, na.rm=T) , delay=mean(arr_delay, na.rm=T)) %>% arrange(desc(delay))
# 4.
c %>% group_by(dest) %>% summarise(count=n(), dist=mean(distance, na.rm=T) , delay=mean(arr_delay, na.rm=T)) %>% arrange(delay)
ggplot(data = d, aes(x=dist, y=delay))+geom_point(size=count)
# 4.
d <- c %>% group_by(dest) %>% summarise(count=n(), dist=mean(distance, na.rm=T) , delay=mean(arr_delay, na.rm=T)) %>% arrange(delay)
ggplot(data = d, aes(x=dist, y=delay))+geom_point(size=count)
rlang::last_error()
ggplot(data = d, aes(x=dist, y=delay))+geom_point(size=d$count)
ggplot(data = d)+geom_point(aes(x=dist, y=delay), size=d$count, color="red")
ggplot(data = d, aes(x=dist, y=delay), size=d$count, color="red")+geom_point()
ggplot(data = d, aes(x=dist, y=delay), size=d$count, color=count)+geom_point()
ggplot(data = d, aes(x=dist, y=delay), size=count)+geom_point()
# 5.
c$origin
# 5.
unique(c$origin)
c$dep_delay
unique(c$dep_delay)
c$sched_dep_time
unique(c$sched_dep_time)
# 5.
e <- c %>% filter(!is.na(dep_time)) %>% group_by(origin) %>% summarise(On_time=ifelse(dep_delay<5,"on"), Delayed=ifelse(dep_delay>=5,"del"))
e <- c %>% filter(!is.na(dep_time)) %>% group_by(origin) %>% summarise(count=n()) %>% mutate(total=sum(count)) %>% mutate(percent= round((count/total)*100,1))
e <- c %>% filter(!is.na(dep_time)) %>% group_by(origin) %>% summarise(count=n()) %>% mutate(total=sum(count)) %>% mutate(percent= round((count/total)*100,1))
e
e <- c %>% filter(!is.na(dep_time)) %>% group_by(origin) %>% summarise(count=n()) %>% mutate(total=sum(count)) %>% mutate(percent= round((count/total)*100,1)) %>% mutate(On_time=ifelse(dep_delay<5,"on"), Delayed=ifelse(dep_delay>=5,"del"))
e <- c %>% filter(!is.na(dep_time)) %>% group_by(origin) %>% summarise(count=n()) %>% mutate(total=sum(count)) %>% mutate(percent= round((count/total)*100,1)) %>% mutate(On_time=ifelse(dep_delay<5,T,F), Delayed=ifelse(dep_delay>=5,T,F))
e <- c %>% filter(!is.na(dep_time)) %>% group_by(origin) %>% summarise(count=n()) %>% mutate(total=sum(count)) %>% mutate(percent= round((count/total)*100,1)) %>% mutate(On_time=ifelse(c$dep_delay<5,T,F), Delayed=ifelse(c$dep_delay>=5,T,F))
c$dep_delay
e <- c %>% filter(!is.na(dep_time)) %>% filter(!is.na(dep_delay))%>% group_by(origin) %>% summarise(count=n()) %>% mutate(total=sum(count)) %>% mutate(percent= round((count/total)*100,1)) %>% mutate(On_time=ifelse(c$dep_delay<5,T,F), Delayed=ifelse(c$dep_delay>=5,T,F))
sd <- c %>% mutate(On_time=ifelse(c$dep_delay<5,T,F), Delayed=ifelse(c$dep_delay>=5,T,F))
sd
rm(sd)
e <- c %>% filter(!is.na(dep_time)) %>% filter(!is.na(dep_delay))%>% mutate(On_time=ifelse(c$dep_delay<5,T,F), Delayed=ifelse(c$dep_delay>=5,T,F)) %>% group_by(origin) %>% summarise(count=n()) %>% mutate(total=sum(count)) %>% mutate(percent= round((count/total)*100,1))
c %>% filter(!is.na(dep_time)) %>% filter(!is.na(dep_delay))%>% mutate(On_time=ifelse(c$dep_delay<5,T,F), Delayed=ifelse(c$dep_delay>=5,T,F))
e <- c %>% mutate(On_time=ifelse(c$dep_delay<5,T,F), Delayed=ifelse(c$dep_delay>=5,T,F)) %>% filter(!is.na(dep_time)) %>% filter(!is.na(dep_delay)) %>% group_by(origin) %>% summarise(count=n()) %>% mutate(total=sum(count)) %>% mutate(percent= round((count/total)*100,1))
e
e <- c %>% mutate(On_time=ifelse(c$dep_delay<5,T,F), Delayed=ifelse(c$dep_delay>=5,T,F)) %>% filter(!is.na(dep_time)) %>% filter(!is.na(dep_delay)) %>% group_by(origin) %>% summarise(count=n(),On_time,Delayed) %>% mutate(total=sum(count)) %>% mutate(percent= round((count/total)*100,1))
e <- c %>% mutate(On_time=ifelse(c$dep_delay<5,T,F), Delayed=ifelse(c$dep_delay>=5,T,F)) %>% filter(!is.na(dep_time)) %>% filter(!is.na(dep_delay)) %>% group_by(origin) %>% summarise(count=n(),On_time= count(On_time),Delayed=count(Delayed)) %>% mutate(total=sum(count)) %>% mutate(percent= round((count/total)*100,1))
c %>% mutate(On_time=ifelse(c$dep_delay<5,T,F), Delayed=ifelse(c$dep_delay>=5,T,F))
f <- c %>% mutate(On_time=ifelse(c$dep_delay<5,T,F), Delayed=ifelse(c$dep_delay>=5,T,F))
ctable(x=f$On_time, y=f$Delayed)
library(nycflights13)
str(flights)
str(airlines)
# 1.
a <- flights %>% filter(year==2013) %>% select(dep_time)
table(is.na(a$dep_time))
# 2.
b <- flights %>% filter(year==2013) %>% filter(!is.na(dep_time)) %>% group_by(carrier) %>% summarise(n=n())
ggplot(data = b, aes(x=reorder(carrier, -n), y= n))+geom_col()
# 3.
c <- merge(flights, airlines)
c %>% group_by(carrier, name) %>% summarise(mean_dep_delay=mean(dep_delay, na.rm=T)) %>% arrange(mean_dep_delay)
# 4.
d <- c %>% group_by(dest) %>% summarise(count=n(), dist=mean(distance, na.rm=T) , delay=mean(arr_delay, na.rm=T)) %>% arrange(delay)
ggplot(data = d, aes(x=dist, y=delay), size=count)+geom_point()
# 5.
e <- c %>% mutate(On_time=ifelse(c$dep_delay<5,T,F), Delayed=ifelse(c$dep_delay>=5,T,F)) %>% filter(!is.na(dep_time)) %>% filter(!is.na(dep_delay)) %>% group_by(origin) %>% summarise(count=n(),On_time= count(On_time),Delayed=count(Delayed)) %>% mutate(total=sum(count)) %>% mutate(percent= round((count/total)*100,1))
clear
cld
cls
gmap+geom_point(data = ds.yeoksam2,
aes(x=경도, y=위도),size=2,alpha=0.5, col="red") +
labs(x = "Longitude", y = "Latitude",
title="역삼1동 커피점")
